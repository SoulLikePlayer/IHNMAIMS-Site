{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\louis\\\\Desktop\\\\CodeHTML\\\\IHNMAIMS - Site\\\\frontend\\\\src\\\\components\\\\SecretContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// SecretContext.js\nimport React, { createContext, useState, useContext } from 'react';\n\n// Crée le contexte pour les secrets\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SecretContext = /*#__PURE__*/createContext();\nconst initialSecrets = [{\n  id: 1,\n  text: 'La raison de la folie de AM',\n  found: false\n}\n// Ajoutez d'autres secrets ici si nécessaire\n];\n\n// Provider pour gérer l'état des secrets\nexport const SecretProvider = ({\n  children\n}) => {\n  _s();\n  const [secrets, setSecrets] = useState(initialSecrets);\n\n  // Fonction pour révéler ou cacher un secret en fonction de son ID\n  const toggleSecret = id => {\n    setSecrets(prevSecrets => prevSecrets.map(secret => secret.id === id ? {\n      ...secret,\n      found: !secret.found\n    } : secret));\n  };\n\n  // Fonction pour obtenir un secret par ID\n  const getSecretById = id => {\n    return secrets.find(secret => secret.id === id);\n  };\n  return /*#__PURE__*/_jsxDEV(SecretContext.Provider, {\n    value: {\n      secrets,\n      toggleSecret,\n      getSecretById\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 5\n  }, this);\n};\n_s(SecretProvider, \"L2oU1rBkTqk7p7a4Aed4yLjCNfw=\");\n_c = SecretProvider;\nexport const useSecret = () => {\n  _s2();\n  const context = useContext(SecretContext);\n  if (!context) {\n    throw new Error('useSecret must be used within a SecretProvider');\n  }\n  return context;\n};\n_s2(useSecret, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"SecretProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","jsxDEV","_jsxDEV","SecretContext","initialSecrets","id","text","found","SecretProvider","children","_s","secrets","setSecrets","toggleSecret","prevSecrets","map","secret","getSecretById","find","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useSecret","_s2","context","Error","$RefreshReg$"],"sources":["C:/Users/louis/Desktop/CodeHTML/IHNMAIMS - Site/frontend/src/components/SecretContext.js"],"sourcesContent":["// SecretContext.js\r\nimport React, { createContext, useState, useContext } from 'react';\r\n\r\n// Crée le contexte pour les secrets\r\nconst SecretContext = createContext();\r\n\r\nconst initialSecrets = [\r\n  { id: 1, text: 'La raison de la folie de AM', found: false },\r\n  // Ajoutez d'autres secrets ici si nécessaire\r\n];\r\n\r\n// Provider pour gérer l'état des secrets\r\nexport const SecretProvider = ({ children }) => {\r\n  const [secrets, setSecrets] = useState(initialSecrets);\r\n\r\n  // Fonction pour révéler ou cacher un secret en fonction de son ID\r\n  const toggleSecret = (id) => {\r\n    setSecrets((prevSecrets) =>\r\n      prevSecrets.map((secret) =>\r\n        secret.id === id ? { ...secret, found: !secret.found } : secret\r\n      )\r\n    );\r\n  };\r\n\r\n  // Fonction pour obtenir un secret par ID\r\n  const getSecretById = (id) => {\r\n    return secrets.find((secret) => secret.id === id);\r\n  };\r\n\r\n  return (\r\n    <SecretContext.Provider value={{ secrets, toggleSecret, getSecretById }}>\r\n      {children}\r\n    </SecretContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useSecret = () => {\r\n  const context = useContext(SecretContext);\r\n  if (!context) {\r\n    throw new Error('useSecret must be used within a SecretProvider');\r\n  }\r\n  return context;\r\n};\r\n"],"mappings":";;;AAAA;AACA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,UAAU,QAAQ,OAAO;;AAElE;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,aAAa,gBAAGL,aAAa,CAAC,CAAC;AAErC,MAAMM,cAAc,GAAG,CACrB;EAAEC,EAAE,EAAE,CAAC;EAAEC,IAAI,EAAE,6BAA6B;EAAEC,KAAK,EAAE;AAAM;AAC3D;AAAA,CACD;;AAED;AACA,OAAO,MAAMC,cAAc,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC9C,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGb,QAAQ,CAACK,cAAc,CAAC;;EAEtD;EACA,MAAMS,YAAY,GAAIR,EAAE,IAAK;IAC3BO,UAAU,CAAEE,WAAW,IACrBA,WAAW,CAACC,GAAG,CAAEC,MAAM,IACrBA,MAAM,CAACX,EAAE,KAAKA,EAAE,GAAG;MAAE,GAAGW,MAAM;MAAET,KAAK,EAAE,CAACS,MAAM,CAACT;IAAM,CAAC,GAAGS,MAC3D,CACF,CAAC;EACH,CAAC;;EAED;EACA,MAAMC,aAAa,GAAIZ,EAAE,IAAK;IAC5B,OAAOM,OAAO,CAACO,IAAI,CAAEF,MAAM,IAAKA,MAAM,CAACX,EAAE,KAAKA,EAAE,CAAC;EACnD,CAAC;EAED,oBACEH,OAAA,CAACC,aAAa,CAACgB,QAAQ;IAACC,KAAK,EAAE;MAAET,OAAO;MAAEE,YAAY;MAAEI;IAAc,CAAE;IAAAR,QAAA,EACrEA;EAAQ;IAAAY,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACa,CAAC;AAE7B,CAAC;AAACd,EAAA,CAtBWF,cAAc;AAAAiB,EAAA,GAAdjB,cAAc;AAwB3B,OAAO,MAAMkB,SAAS,GAAGA,CAAA,KAAM;EAAAC,GAAA;EAC7B,MAAMC,OAAO,GAAG5B,UAAU,CAACG,aAAa,CAAC;EACzC,IAAI,CAACyB,OAAO,EAAE;IACZ,MAAM,IAAIC,KAAK,CAAC,gDAAgD,CAAC;EACnE;EACA,OAAOD,OAAO;AAChB,CAAC;AAACD,GAAA,CANWD,SAAS;AAAA,IAAAD,EAAA;AAAAK,YAAA,CAAAL,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}