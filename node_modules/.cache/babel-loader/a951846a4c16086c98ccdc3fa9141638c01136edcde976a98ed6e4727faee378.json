{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\louis\\\\Desktop\\\\CodeHTML\\\\IHNMAIMS - Site\\\\frontend\\\\src\\\\components\\\\HackingOverlay.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport \"../style/hacking.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction HackingOverlay() {\n  _s();\n  const [squares, setSquares] = useState([]);\n  useEffect(() => {\n    const intervalId = setInterval(() => {\n      const binaryText = generateRandomBinary(); // Génération du texte binaire\n\n      const newSquare = {\n        id: Date.now(),\n        top: Math.random() * 100 + \"vh\",\n        left: Math.random() * 100 + \"vw\",\n        size: Math.random() * 100 + 50 + \"px\",\n        // Taille entre 50px et 150px\n        binary: binaryText // Texte binaire aléatoire\n      };\n      setSquares(prevSquares => [...prevSquares, newSquare]);\n\n      // Retirer le carré après une courte période\n      setTimeout(() => {\n        setSquares(prevSquares => prevSquares.filter(square => square.id !== newSquare.id));\n      }, Math.random() * 1500 + 500); // Durée de vie entre 500ms et 2000ms\n    }, 300); // Intervalle de 300ms pour générer un nouveau carré\n\n    return () => clearInterval(intervalId);\n  }, []);\n  const generateRandomBinary = () => {\n    const length = Math.floor(Math.random() * 20) + 10; // Longueur entre 10 et 30 caractères\n    let binaryString = \"\";\n    for (let i = 0; i < length; i++) {\n      binaryString += Math.random() > 0.5 ? \"1\" : \"0\";\n    }\n    return binaryString;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"hacking-overlay\",\n    children: squares.map(square => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"hacking-square\",\n      style: {\n        top: square.top,\n        left: square.left,\n        width: square.size,\n        height: square.size\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"binary-text\",\n        children: square.binary\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 11\n      }, this), \" \"]\n    }, square.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n}\n_s(HackingOverlay, \"+I8Xw6B29f1JOxAQNg7JrZQdLMo=\");\n_c = HackingOverlay;\nexport default HackingOverlay;\nvar _c;\n$RefreshReg$(_c, \"HackingOverlay\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","HackingOverlay","_s","squares","setSquares","intervalId","setInterval","binaryText","generateRandomBinary","newSquare","id","Date","now","top","Math","random","left","size","binary","prevSquares","setTimeout","filter","square","clearInterval","length","floor","binaryString","i","className","children","map","style","width","height","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/louis/Desktop/CodeHTML/IHNMAIMS - Site/frontend/src/components/HackingOverlay.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport \"../style/hacking.css\";\r\n\r\nfunction HackingOverlay() {\r\n  const [squares, setSquares] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const intervalId = setInterval(() => {\r\n      const binaryText = generateRandomBinary(); // Génération du texte binaire\r\n\r\n      const newSquare = {\r\n        id: Date.now(),\r\n        top: Math.random() * 100 + \"vh\",\r\n        left: Math.random() * 100 + \"vw\",\r\n        size: Math.random() * 100 + 50 + \"px\", // Taille entre 50px et 150px\r\n        binary: binaryText, // Texte binaire aléatoire\r\n      };\r\n\r\n      setSquares((prevSquares) => [...prevSquares, newSquare]);\r\n\r\n      // Retirer le carré après une courte période\r\n      setTimeout(() => {\r\n        setSquares((prevSquares) =>\r\n          prevSquares.filter((square) => square.id !== newSquare.id)\r\n        );\r\n      }, Math.random() * 1500 + 500); // Durée de vie entre 500ms et 2000ms\r\n    }, 300); // Intervalle de 300ms pour générer un nouveau carré\r\n\r\n    return () => clearInterval(intervalId);\r\n  }, []);\r\n\r\n  const generateRandomBinary = () => {\r\n    const length = Math.floor(Math.random() * 20) + 10; // Longueur entre 10 et 30 caractères\r\n    let binaryString = \"\";\r\n    for (let i = 0; i < length; i++) {\r\n      binaryString += Math.random() > 0.5 ? \"1\" : \"0\";\r\n    }\r\n    return binaryString;\r\n  };\r\n\r\n  return (\r\n    <div className=\"hacking-overlay\">\r\n      {squares.map((square) => (\r\n        <div\r\n          key={square.id}\r\n          className=\"hacking-square\"\r\n          style={{\r\n            top: square.top,\r\n            left: square.left,\r\n            width: square.size,\r\n            height: square.size,\r\n          }}\r\n        >\r\n          <span className=\"binary-text\">{square.binary}</span> {/* Affichage du texte binaire */}\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default HackingOverlay;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}